{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/swr/esm/libs/is-document-visible.js","../node_modules/swr/esm/libs/is-online.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/swr/esm/libs/hash.js","../node_modules/swr/esm/config.js","../node_modules/swr/esm/cache.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/swr/esm/libs/throttle.js","../node_modules/swr/esm/swr-config-context.js","../node_modules/swr/esm/use-swr.js","../node_modules/swr/esm/use-swr-pages.js","../node_modules/swr/esm/index.js","../node_modules/swr/node_modules/fast-deep-equal/index.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","isDocumentVisible","document","visibilityState","isOnline","navigator","onLine","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","key","table","WeakMap","counter","cache","initialData","this","__cache","Map","entries","__listeners","protoProps","staticProps","serializeKey","_key","get","value","shouldNotify","set","mutate","notify","keys","has","forEach","clear","delete","args","err","_hash","String","hash","listener","Error","isSubscribed","push","index","indexOf","o","F","s","n","done","e","_e","f","it","normalCompletion","didErr","step","next","_e2","prototype","CONCURRENT_PROMISES","CONCURRENT_PROMISES_TS","FOCUS_REVALIDATORS","CACHE_REVALIDATORS","MUTATION_TS","slowConnection","window","effectiveType","defaultConfig","onLoadingSlow","onSuccess","onError","onErrorRetry","_","__","config","revalidate","opts","errorRetryCount","retryCount","count","Math","min","timeout","random","errorRetryInterval","setTimeout","focusThrottleInterval","dedupingInterval","loadingTimeout","refreshInterval","revalidateOnFocus","revalidateOnReconnect","refreshWhenHidden","refreshWhenOffline","shouldRetryOnError","suspense","compare","deepEqual","eventsBinded","addEventListener","throttle","fn","interval","pending","SWRConfigContext","createContext","displayName","IS_SERVER","useIsomorphicLayoutEffect","useEffect","useLayoutEffect","trigger","shouldRevalidate","keyErr","updaters","currentData","currentError","broadcastState","data","error","_data","a","Date","now","then","Provider","useSWR","fnArgs","assign","useContext","fetcher","initialError","stateDependencies","useRef","isValidating","stateRef","rerender","useState","dispatch","useCallback","payload","shouldUpdateState","k","current","unmountedRef","keyRef","boundMutate","revalidateOpts","dedupe","loading","shouldDeduping","startAt","newData","undefined","newState","currentHookData","latestKeyedData","onFocus","softRevalidate","revalidateOnMount","onUpdate","updatedData","updatedError","needUpdate","reconnect","revalidators","pop","removeEventListener","timer","tick","clearTimeout","latestData","latestError","useMemo","state","defineProperties","keyList","hasProp","hasOwnProperty","module","exports","equal","b","arrA","arrB","dateA","dateB","getTime","regexpA","RegExp","regexpB","toString","call"],"mappings":"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","file":"static/js/0.c64e2a40.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function isDocumentVisible() {\n    if (typeof document !== 'undefined' &&\n        typeof document.visibilityState !== 'undefined') {\n        return document.visibilityState !== 'hidden';\n    }\n    // always assume it's visible\n    return true;\n}\n","export default function isOnline() {\n    if (typeof navigator.onLine !== 'undefined') {\n        return navigator.onLine;\n    }\n    // always assume it's online\n    return true;\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\n// counter of the key\nlet counter = 0;\n// hashes an array of objects and returns a string\nexport default function hash(args) {\n    if (!args.length)\n        return '';\n    let key = 'arg';\n    for (let i = 0; i < args.length; ++i) {\n        let _hash;\n        if (args[i] === null || typeof args[i] !== 'object') {\n            // need to consider the case that args[i] is a string:\n            // args[i]        _hash\n            // \"undefined\" -> '\"undefined\"'\n            // undefined   -> 'undefined'\n            // 123         -> '123'\n            // null        -> 'null'\n            // \"null\"      -> '\"null\"'\n            if (typeof args[i] === 'string') {\n                _hash = '\"' + args[i] + '\"';\n            }\n            else {\n                _hash = String(args[i]);\n            }\n        }\n        else {\n            if (!table.has(args[i])) {\n                _hash = counter;\n                table.set(args[i], counter++);\n            }\n            else {\n                _hash = table.get(args[i]);\n            }\n        }\n        key += '@' + _hash;\n    }\n    return key;\n}\n","import deepEqual from 'fast-deep-equal';\nimport isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online';\nimport Cache from './cache';\n// cache\nconst cache = new Cache();\n// state managers\nconst CONCURRENT_PROMISES = {};\nconst CONCURRENT_PROMISES_TS = {};\nconst FOCUS_REVALIDATORS = {};\nconst CACHE_REVALIDATORS = {};\nconst MUTATION_TS = {};\n// error retry\nfunction onErrorRetry(_, __, config, revalidate, opts) {\n    if (!isDocumentVisible()) {\n        // if it's hidden, stop\n        // it will auto revalidate when focus\n        return;\n    }\n    if (config.errorRetryCount && opts.retryCount > config.errorRetryCount) {\n        return;\n    }\n    // exponential backoff\n    const count = Math.min(opts.retryCount || 0, 8);\n    const timeout = ~~((Math.random() + 0.5) * (1 << count)) * config.errorRetryInterval;\n    setTimeout(revalidate, timeout, opts);\n}\n// client side: need to adjust the config\n// based on the browser status\n// slow connection (<= 70Kbps)\nconst slowConnection = typeof window !== 'undefined' &&\n    navigator['connection'] &&\n    ['slow-2g', '2g'].indexOf(navigator['connection'].effectiveType) !== -1;\n// config\nconst defaultConfig = {\n    // events\n    onLoadingSlow: () => { },\n    onSuccess: () => { },\n    onError: () => { },\n    onErrorRetry,\n    errorRetryInterval: (slowConnection ? 10 : 5) * 1000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: (slowConnection ? 5 : 3) * 1000,\n    refreshInterval: 0,\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n    shouldRetryOnError: true,\n    suspense: false,\n    compare: deepEqual\n};\n// Focus revalidate\nlet eventsBinded = false;\nif (typeof window !== 'undefined' && window.addEventListener && !eventsBinded) {\n    const revalidate = () => {\n        if (!isDocumentVisible() || !isOnline())\n            return;\n        for (let key in FOCUS_REVALIDATORS) {\n            if (FOCUS_REVALIDATORS[key][0])\n                FOCUS_REVALIDATORS[key][0]();\n        }\n    };\n    window.addEventListener('visibilitychange', revalidate, false);\n    window.addEventListener('focus', revalidate, false);\n    // only bind the events once\n    eventsBinded = true;\n}\nexport { CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, CACHE_REVALIDATORS, MUTATION_TS, cache };\nexport default defaultConfig;\n","import { mutate } from './use-swr';\nimport hash from './libs/hash';\nexport default class Cache {\n    constructor(initialData = {}) {\n        this.__cache = new Map(Object.entries(initialData));\n        this.__listeners = [];\n    }\n    get(key) {\n        const [_key] = this.serializeKey(key);\n        return this.__cache.get(_key);\n    }\n    set(key, value, shouldNotify = true) {\n        const [_key] = this.serializeKey(key);\n        this.__cache.set(_key, value);\n        if (shouldNotify)\n            mutate(key, value, false);\n        this.notify();\n    }\n    keys() {\n        return Array.from(this.__cache.keys());\n    }\n    has(key) {\n        const [_key] = this.serializeKey(key);\n        return this.__cache.has(_key);\n    }\n    clear(shouldNotify = true) {\n        if (shouldNotify)\n            this.__cache.forEach(key => mutate(key, null, false));\n        this.__cache.clear();\n        this.notify();\n    }\n    delete(key, shouldNotify = true) {\n        const [_key] = this.serializeKey(key);\n        if (shouldNotify)\n            mutate(key, null, false);\n        this.__cache.delete(_key);\n        this.notify();\n    }\n    // TODO: introduce namespace for the cache\n    serializeKey(key) {\n        let args = null;\n        if (typeof key === 'function') {\n            try {\n                key = key();\n            }\n            catch (err) {\n                // dependencies not ready\n                key = '';\n            }\n        }\n        if (Array.isArray(key)) {\n            // args array\n            args = key;\n            key = hash(key);\n        }\n        else {\n            // convert null to ''\n            key = String(key || '');\n        }\n        const errorKey = key ? 'err@' + key : '';\n        return [key, args, errorKey];\n    }\n    subscribe(listener) {\n        if (typeof listener !== 'function') {\n            throw new Error('Expected the listener to be a function.');\n        }\n        let isSubscribed = true;\n        this.__listeners.push(listener);\n        return () => {\n            if (!isSubscribed)\n                return;\n            isSubscribed = false;\n            const index = this.__listeners.indexOf(listener);\n            if (index > -1) {\n                this.__listeners[index] = this.__listeners[this.__listeners.length - 1];\n                this.__listeners.length--;\n            }\n        };\n    }\n    // Notify Cache subscribers about a change in the cache\n    notify() {\n        for (let listener of this.__listeners) {\n            listener();\n        }\n    }\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function throttle(fn, interval) {\n    let pending = false;\n    return (...args) => {\n        if (pending)\n            return;\n        pending = true;\n        fn(...args);\n        setTimeout(() => (pending = false), interval);\n    };\n}\n","import { createContext } from 'react';\nconst SWRConfigContext = createContext({});\nSWRConfigContext.displayName = 'SWRConfigContext';\nexport default SWRConfigContext;\n","import { useCallback, useContext, useEffect, useLayoutEffect, useState, useRef, useMemo } from 'react';\nimport defaultConfig, { CACHE_REVALIDATORS, CONCURRENT_PROMISES, CONCURRENT_PROMISES_TS, FOCUS_REVALIDATORS, MUTATION_TS, cache } from './config';\nimport isDocumentVisible from './libs/is-document-visible';\nimport isOnline from './libs/is-online';\nimport throttle from './libs/throttle';\nimport SWRConfigContext from './swr-config-context';\nconst IS_SERVER = typeof window === 'undefined';\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\nconst trigger = (_key, shouldRevalidate = true) => {\n    // we are ignoring the second argument which correspond to the arguments\n    // the fetcher will receive when key is an array\n    const [key, , keyErr] = cache.serializeKey(_key);\n    if (!key)\n        return;\n    const updaters = CACHE_REVALIDATORS[key];\n    if (key && updaters) {\n        const currentData = cache.get(key);\n        const currentError = cache.get(keyErr);\n        for (let i = 0; i < updaters.length; ++i) {\n            updaters[i](shouldRevalidate, currentData, currentError, i > 0);\n        }\n    }\n};\nconst broadcastState = (key, data, error) => {\n    const updaters = CACHE_REVALIDATORS[key];\n    if (key && updaters) {\n        for (let i = 0; i < updaters.length; ++i) {\n            updaters[i](false, data, error);\n        }\n    }\n};\nconst mutate = async (_key, _data, shouldRevalidate = true) => {\n    const [key] = cache.serializeKey(_key);\n    if (!key)\n        return;\n    // if there is no new data, call revalidate against the key\n    if (typeof _data === 'undefined')\n        return trigger(_key, shouldRevalidate);\n    // update timestamp\n    MUTATION_TS[key] = Date.now() - 1;\n    let data, error;\n    if (_data && typeof _data === 'function') {\n        // `_data` is a function, call it passing current cache value\n        try {\n            data = await _data(cache.get(key));\n        }\n        catch (err) {\n            error = err;\n        }\n    }\n    else if (_data && typeof _data.then === 'function') {\n        // `_data` is a promise\n        try {\n            data = await _data;\n        }\n        catch (err) {\n            error = err;\n        }\n    }\n    else {\n        data = _data;\n    }\n    if (typeof data !== 'undefined') {\n        // update cached data, avoid notifying from the cache\n        cache.set(key, data, false);\n    }\n    // update existing SWR Hooks' state\n    const updaters = CACHE_REVALIDATORS[key];\n    if (updaters) {\n        for (let i = 0; i < updaters.length; ++i) {\n            updaters[i](!!shouldRevalidate, data, error, i > 0);\n        }\n    }\n    // throw error or return data to be used by caller of mutate\n    if (error)\n        throw error;\n    return data;\n};\nfunction useSWR(...args) {\n    let _key, fn, config = {};\n    if (args.length >= 1) {\n        _key = args[0];\n    }\n    if (args.length > 2) {\n        fn = args[1];\n        config = args[2];\n    }\n    else {\n        if (typeof args[1] === 'function') {\n            fn = args[1];\n        }\n        else if (typeof args[1] === 'object') {\n            config = args[1];\n        }\n    }\n    // we assume `key` as the identifier of the request\n    // `key` can change but `fn` shouldn't\n    // (because `revalidate` only depends on `key`)\n    // `keyErr` is the cache key for error objects\n    const [key, fnArgs, keyErr] = cache.serializeKey(_key);\n    config = Object.assign({}, defaultConfig, useContext(SWRConfigContext), config);\n    if (typeof fn === 'undefined') {\n        // use a global fetcher\n        fn = config.fetcher;\n    }\n    const initialData = cache.get(key) || config.initialData;\n    const initialError = cache.get(keyErr);\n    // if a state is accessed (data, error or isValidating),\n    // we add the state to dependencies so if the state is\n    // updated in the future, we can trigger a rerender\n    const stateDependencies = useRef({\n        data: false,\n        error: false,\n        isValidating: false\n    });\n    const stateRef = useRef({\n        data: initialData,\n        error: initialError,\n        isValidating: false\n    });\n    const rerender = useState(null)[1];\n    let dispatch = useCallback(payload => {\n        let shouldUpdateState = false;\n        for (let k in payload) {\n            stateRef.current[k] = payload[k];\n            if (stateDependencies.current[k]) {\n                shouldUpdateState = true;\n            }\n        }\n        if (shouldUpdateState || config.suspense) {\n            rerender({});\n        }\n    }, []);\n    // error ref inside revalidate (is last request errored?)\n    const unmountedRef = useRef(false);\n    const keyRef = useRef(key);\n    const boundMutate = useCallback((data, shouldRevalidate) => {\n        return mutate(key, data, shouldRevalidate);\n    }, [key]);\n    // start a revalidation\n    const revalidate = useCallback(async (revalidateOpts = {}) => {\n        if (!key || !fn)\n            return false;\n        if (unmountedRef.current)\n            return false;\n        revalidateOpts = Object.assign({ dedupe: false }, revalidateOpts);\n        let loading = true;\n        let shouldDeduping = typeof CONCURRENT_PROMISES[key] !== 'undefined' && revalidateOpts.dedupe;\n        // start fetching\n        try {\n            dispatch({\n                isValidating: true\n            });\n            let newData;\n            let startAt;\n            if (shouldDeduping) {\n                // there's already an ongoing request,\n                // this one needs to be deduplicated.\n                startAt = CONCURRENT_PROMISES_TS[key];\n                newData = await CONCURRENT_PROMISES[key];\n            }\n            else {\n                // if not deduping the request (hard revalidate) but\n                // there're other ongoing request(s) at the same time,\n                // we need to ignore the other result(s) to avoid\n                // possible race conditions:\n                // req1------------------>res1\n                //      req2-------->res2\n                // in that case, the second response should not be overridden\n                // by the first one.\n                if (CONCURRENT_PROMISES[key]) {\n                    // we can mark it as a mutation to ignore\n                    // all requests which are fired before this one\n                    MUTATION_TS[key] = Date.now() - 1;\n                }\n                // if no cache being rendered currently (it shows a blank page),\n                // we trigger the loading slow event.\n                if (config.loadingTimeout && !cache.get(key)) {\n                    setTimeout(() => {\n                        if (loading)\n                            config.onLoadingSlow(key, config);\n                    }, config.loadingTimeout);\n                }\n                if (fnArgs !== null) {\n                    CONCURRENT_PROMISES[key] = fn(...fnArgs);\n                }\n                else {\n                    CONCURRENT_PROMISES[key] = fn(key);\n                }\n                CONCURRENT_PROMISES_TS[key] = startAt = Date.now();\n                newData = await CONCURRENT_PROMISES[key];\n                setTimeout(() => {\n                    delete CONCURRENT_PROMISES[key];\n                    delete CONCURRENT_PROMISES_TS[key];\n                }, config.dedupingInterval);\n                // trigger the success event,\n                // only do this for the original request.\n                config.onSuccess(newData, key, config);\n            }\n            // if the revalidation happened earlier than the local mutation,\n            // we have to ignore the result because it could override.\n            // meanwhile, a new revalidation should be triggered by the mutation.\n            if (MUTATION_TS[key] && startAt <= MUTATION_TS[key]) {\n                dispatch({ isValidating: false });\n                return false;\n            }\n            cache.set(key, newData, false);\n            cache.set(keyErr, undefined, false);\n            // new state for the reducer\n            const newState = {\n                isValidating: false\n            };\n            if (typeof stateRef.current.error !== 'undefined') {\n                // we don't have an error\n                newState.error = undefined;\n            }\n            if (!config.compare(stateRef.current.data, newData)) {\n                // deep compare to avoid extra re-render\n                // data changed\n                newState.data = newData;\n            }\n            // merge the new state\n            dispatch(newState);\n            if (!shouldDeduping) {\n                // also update other hooks\n                broadcastState(key, newData, undefined);\n            }\n        }\n        catch (err) {\n            delete CONCURRENT_PROMISES[key];\n            delete CONCURRENT_PROMISES_TS[key];\n            cache.set(keyErr, err, false);\n            // get a new error\n            // don't use deep equal for errors\n            if (stateRef.current.error !== err) {\n                // we keep the stale data\n                dispatch({\n                    isValidating: false,\n                    error: err\n                });\n                if (!shouldDeduping) {\n                    // also broadcast to update other hooks\n                    broadcastState(key, undefined, err);\n                }\n            }\n            // events and retry\n            config.onError(err, key, config);\n            if (config.shouldRetryOnError) {\n                // when retrying, we always enable deduping\n                const retryCount = (revalidateOpts.retryCount || 0) + 1;\n                config.onErrorRetry(err, key, config, revalidate, Object.assign({ dedupe: true }, revalidateOpts, { retryCount }));\n            }\n        }\n        loading = false;\n        return true;\n    }, [key]);\n    // mounted (client side rendering)\n    useIsomorphicLayoutEffect(() => {\n        if (!key)\n            return undefined;\n        // after `key` updates, we need to mark it as mounted\n        unmountedRef.current = false;\n        // after the component is mounted (hydrated),\n        // we need to update the data from the cache\n        // and trigger a revalidation\n        const currentHookData = stateRef.current.data;\n        const latestKeyedData = cache.get(key) || config.initialData;\n        // update the state if the key changed (not the inital render) or cache updated\n        if (keyRef.current !== key ||\n            !config.compare(currentHookData, latestKeyedData)) {\n            dispatch({ data: latestKeyedData });\n            keyRef.current = key;\n        }\n        // revalidate with deduping\n        const softRevalidate = () => revalidate({ dedupe: true });\n        // trigger a revalidation\n        if (config.revalidateOnMount ||\n            (!config.initialData && config.revalidateOnMount === undefined)) {\n            if (typeof latestKeyedData !== 'undefined' &&\n                !IS_SERVER &&\n                window['requestIdleCallback']) {\n                // delay revalidate if there's cache\n                // to not block the rendering\n                window['requestIdleCallback'](softRevalidate);\n            }\n            else {\n                softRevalidate();\n            }\n        }\n        // whenever the window gets focused, revalidate\n        let onFocus;\n        if (config.revalidateOnFocus) {\n            // throttle: avoid being called twice from both listeners\n            // and tabs being switched quickly\n            onFocus = throttle(softRevalidate, config.focusThrottleInterval);\n            if (!FOCUS_REVALIDATORS[key]) {\n                FOCUS_REVALIDATORS[key] = [onFocus];\n            }\n            else {\n                FOCUS_REVALIDATORS[key].push(onFocus);\n            }\n        }\n        // register global cache update listener\n        const onUpdate = (shouldRevalidate = true, updatedData, updatedError, dedupe = true) => {\n            // update hook state\n            const newState = {};\n            let needUpdate = false;\n            if (typeof updatedData !== 'undefined' &&\n                !config.compare(stateRef.current.data, updatedData)) {\n                newState.data = updatedData;\n                needUpdate = true;\n            }\n            // always update error\n            // because it can be `undefined`\n            if (stateRef.current.error !== updatedError) {\n                newState.error = updatedError;\n                needUpdate = true;\n            }\n            if (needUpdate) {\n                dispatch(newState);\n            }\n            if (shouldRevalidate) {\n                if (dedupe) {\n                    return softRevalidate();\n                }\n                else {\n                    return revalidate();\n                }\n            }\n            return false;\n        };\n        // add updater to listeners\n        if (!CACHE_REVALIDATORS[key]) {\n            CACHE_REVALIDATORS[key] = [onUpdate];\n        }\n        else {\n            CACHE_REVALIDATORS[key].push(onUpdate);\n        }\n        // set up reconnecting when the browser regains network connection\n        let reconnect = null;\n        if (!IS_SERVER && window.addEventListener && config.revalidateOnReconnect) {\n            window.addEventListener('online', (reconnect = softRevalidate));\n        }\n        return () => {\n            // cleanup\n            dispatch = () => null;\n            // mark it as unmounted\n            unmountedRef.current = true;\n            if (onFocus && FOCUS_REVALIDATORS[key]) {\n                const revalidators = FOCUS_REVALIDATORS[key];\n                const index = revalidators.indexOf(onFocus);\n                if (index >= 0) {\n                    // 10x faster than splice\n                    // https://jsperf.com/array-remove-by-index\n                    revalidators[index] = revalidators[revalidators.length - 1];\n                    revalidators.pop();\n                }\n            }\n            if (CACHE_REVALIDATORS[key]) {\n                const revalidators = CACHE_REVALIDATORS[key];\n                const index = revalidators.indexOf(onUpdate);\n                if (index >= 0) {\n                    revalidators[index] = revalidators[revalidators.length - 1];\n                    revalidators.pop();\n                }\n            }\n            if (!IS_SERVER && window.removeEventListener && reconnect !== null) {\n                window.removeEventListener('online', reconnect);\n            }\n        };\n    }, [key, revalidate]);\n    // set up polling\n    useIsomorphicLayoutEffect(() => {\n        let timer = null;\n        const tick = async () => {\n            if (!stateRef.current.error &&\n                (config.refreshWhenHidden || isDocumentVisible()) &&\n                (config.refreshWhenOffline || isOnline())) {\n                // only revalidate when the page is visible\n                // if API request errored, we stop polling in this round\n                // and let the error retry function handle it\n                await revalidate({ dedupe: true });\n            }\n            if (config.refreshInterval) {\n                timer = setTimeout(tick, config.refreshInterval);\n            }\n        };\n        if (config.refreshInterval) {\n            timer = setTimeout(tick, config.refreshInterval);\n        }\n        return () => {\n            if (timer)\n                clearTimeout(timer);\n        };\n    }, [\n        config.refreshInterval,\n        config.refreshWhenHidden,\n        config.refreshWhenOffline,\n        revalidate\n    ]);\n    // suspense\n    if (config.suspense) {\n        // in suspense mode, we can't return empty state\n        // (it should be suspended)\n        // try to get data and error from cache\n        let latestData = cache.get(key);\n        let latestError = cache.get(keyErr);\n        if (typeof latestData === 'undefined' &&\n            typeof latestError === 'undefined') {\n            // need to start the request if it hasn't\n            if (!CONCURRENT_PROMISES[key]) {\n                // trigger revalidate immediately\n                // to get the promise\n                revalidate();\n            }\n            if (CONCURRENT_PROMISES[key] &&\n                typeof CONCURRENT_PROMISES[key].then === 'function') {\n                // if it is a promise\n                throw CONCURRENT_PROMISES[key];\n            }\n            // it's a value, return it directly (override)\n            latestData = CONCURRENT_PROMISES[key];\n        }\n        if (typeof latestData === 'undefined' && latestError) {\n            // in suspense mode, throw error if there's no content\n            throw latestError;\n        }\n        // return the latest data / error from cache\n        // in case `key` has changed\n        return {\n            error: latestError,\n            data: latestData,\n            revalidate,\n            mutate: boundMutate,\n            isValidating: stateRef.current.isValidating\n        };\n    }\n    // define returned state\n    // can be memorized since the state is a ref\n    return useMemo(() => {\n        const state = { revalidate, mutate: boundMutate };\n        Object.defineProperties(state, {\n            error: {\n                // `key` might be changed in the upcoming hook re-render,\n                // but the previous state will stay\n                // so we need to match the latest key and data (fallback to `initialData`)\n                get: function () {\n                    stateDependencies.current.error = true;\n                    return keyRef.current === key ? stateRef.current.error : initialError;\n                }\n            },\n            data: {\n                get: function () {\n                    stateDependencies.current.data = true;\n                    return keyRef.current === key ? stateRef.current.data : initialData;\n                }\n            },\n            isValidating: {\n                get: function () {\n                    stateDependencies.current.isValidating = true;\n                    return stateRef.current.isValidating;\n                }\n            }\n        });\n        return state;\n    }, [revalidate]);\n}\nconst SWRConfig = SWRConfigContext.Provider;\nexport { trigger, mutate, SWRConfig };\nexport default useSWR;\n","import React, { useCallback, useMemo, useState, useRef } from 'react';\nimport { cache } from './config';\n/*\nThe idea\n\nA \"Page\" component renders the content of 1 API request, it accepts an offset (in this example it's from),\nuses a SWR hook (useSWR(API + '?limit=' + limit + '&from=' + from)) and returns items (Projects).\n\nThe UI:\n      +------------------------------------------+\n      |   Projects                               |\n+------------------------------------------------------+\n|     |   +----------------+                     |     |\n|     |                                          |     |\n|     |   +------------+                         |     |\n|     |                                          |     +--> 1 Page\n|     |   +-----------------+                    |     |\n|     |                                          |     |  /projects/list?limit=4\n|     |   +---------+                            |     |\n+------------------------------------------------------+\n      |                                          |\n      |   +------------+                         |     +  /projects/list?limit=4&from=123\n      |                                          |     |\n      |   +----------------+                     |     |\n      |                                          |     |\n      |   +---------+                            |     |\n      |                                          |     |\n      |   +--------------+                       |     +\n      |                                          |\n      |   +-------------------+                  |     +  /projects/list?limit=4&from=456\n      |                                          |     |\n      |   +------------+                         |     |\n      |                                          |     |\n      |   +----------------+                     |     |\n      |                                          |     |\n      |                                          |     +\n\nThe API\n// (inside `render`)\n\nfunction App () {\n  const {\n    pages,    // an array of each page component\n    pageSWRs, // an array of SWRs of each page\n    isLoadingMore,\n    isReachingEnd,\n    isEmpty,\n    loadMore\n  } = useSWRPages(\n    'project-page', // key of this page\n\n    // ======== the actual Page component!\n    ({ offset, withSWR }) => {\n      // required: use `withSWR` to wrap your main SWR (source of your pagination API)\n      const { data } = withSWR(\n        useSWR(API + '?limit=10&from=' + offset) // request projects with offset\n      )\n      if (!data) return <Placeholder>\n      return data.projects.map(project => <Card project={project} team={team}>)\n    },\n    // ========\n\n    // a function accepts a SWR's `data`, and returns the offset of the next page (or null)\n    data => data && data.length >= 10 ? data[data.length - 1].createdAt : null,\n\n    // (optional) outside deps of your Page component. in this case it's empty\n    []\n  )\n\n  // ...\n\n  if (isEmpty) return <EmptyProjectsPage/>\n\n  return <div>\n    {pages}\n    {isReachingEnd\n      ? null\n      : <button loading={isLoadingMore} onClick={loadMore}>Load More</button>}\n  </div>\n}\n*/\nconst pageCacheMap = new Map();\nexport function useSWRPages(pageKey, pageFn, SWRToOffset, deps = []) {\n    const pageCountKey = `_swr_page_count_` + pageKey;\n    const pageOffsetKey = `_swr_page_offset_` + pageKey;\n    const [pageCount, setPageCount] = useState(cache.get(pageCountKey) || 1);\n    const [pageOffsets, setPageOffsets] = useState(cache.get(pageOffsetKey) || [null]);\n    const [pageSWRs, setPageSWRs] = useState([]);\n    const pageFnRef = useRef(pageFn);\n    const emptyPageRef = useRef(false);\n    // Page component (wraps `pageFn`)\n    // for performance reason we need to memorize it\n    const Page = useCallback(props => {\n        // render the page component\n        const dataList = pageFnRef.current(props);\n        // if dataList is [], we can assume this page is empty\n        // TODO: this API is not stable\n        if (dataList && !dataList.length) {\n            emptyPageRef.current = true;\n        }\n        else {\n            emptyPageRef.current = false;\n        }\n        return dataList;\n    }, []);\n    // Doesn't have a next page\n    const isReachingEnd = pageOffsets[pageCount] === null;\n    const isLoadingMore = pageCount === pageOffsets.length;\n    const isEmpty = isReachingEnd && pageCount === 1 && emptyPageRef.current;\n    const loadMore = useCallback(() => {\n        if (isLoadingMore || isReachingEnd)\n            return;\n        setPageCount(c => {\n            cache.set(pageCountKey, c + 1);\n            return c + 1;\n        });\n    }, [isLoadingMore || isReachingEnd]);\n    const _pageFn = useCallback(pageFn, deps);\n    pageFnRef.current = _pageFn;\n    const pages = useMemo(() => {\n        const getWithSWR = id => swr => {\n            if (!pageSWRs[id] ||\n                pageSWRs[id].data !== swr.data ||\n                pageSWRs[id].error !== swr.error ||\n                pageSWRs[id].revalidate !== swr.revalidate) {\n                // hoist side effects: setPageSWRs and setPageOffsets -- https://reactjs.org/blog/2020/02/26/react-v16.13.0.html#warnings-for-some-updates-during-render\n                setTimeout(() => {\n                    setPageSWRs(swrs => {\n                        const _swrs = [...swrs];\n                        _swrs[id] = {\n                            data: swr.data,\n                            error: swr.error,\n                            revalidate: swr.revalidate,\n                            isValidating: swr.isValidating,\n                            mutate: swr.mutate\n                        };\n                        return _swrs;\n                    });\n                    if (typeof swr.data !== 'undefined') {\n                        // set next page's offset\n                        const newPageOffset = SWRToOffset(swr, id);\n                        if (pageOffsets[id + 1] !== newPageOffset) {\n                            setPageOffsets(arr => {\n                                const _arr = [...arr];\n                                _arr[id + 1] = newPageOffset;\n                                cache.set(pageOffsetKey, _arr);\n                                return _arr;\n                            });\n                        }\n                    }\n                });\n            }\n            return swr;\n        };\n        // render each page\n        const p = [];\n        if (!pageCacheMap.has(pageKey)) {\n            pageCacheMap.set(pageKey, []);\n        }\n        const pageCache = pageCacheMap.get(pageKey);\n        for (let i = 0; i < pageCount; ++i) {\n            if (!pageCache[i] ||\n                pageCache[i].offset !== pageOffsets[i] ||\n                pageCache[i].pageFn !== _pageFn) {\n                // when props change or at init\n                // render the page and cache it\n                pageCache[i] = {\n                    component: (React.createElement(Page, { key: `page-${pageOffsets[i]}-${i}`, offset: pageOffsets[i], withSWR: getWithSWR(i) })),\n                    pageFn: _pageFn,\n                    offset: pageOffsets[i]\n                };\n            }\n            p.push(pageCache[i].component);\n        }\n        return p;\n    }, [_pageFn, pageCount, pageSWRs, pageOffsets, pageKey]);\n    return {\n        pages,\n        pageCount,\n        pageSWRs,\n        isLoadingMore,\n        isReachingEnd,\n        isEmpty,\n        loadMore\n    };\n}\n","export * from './use-swr';\nimport { default as useSWR } from './use-swr';\nexport { useSWRPages } from './use-swr-pages';\nexport { cache } from './config';\nexport default useSWR;\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  return a!==a && b!==b;\n};\n"],"sourceRoot":""}